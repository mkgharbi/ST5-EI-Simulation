dtmc

 

const double p1 ;
const double p2 ;
const double r1;
const double r2 ;


const int Nb_piece_max = 1000;
global Nb_piece : [0..Nb_piece_max] init 0; 

const int cap1;
global buf1 : [0..cap1] init 0;

global is_up1: [0..1] init 1;
global is_up2: [0..1] init 1;

formula buf0_empty=false;
formula buf0_full=true;

formula buf1_empty=(buf1<=0);
formula buf1_full=(buf1>=cap1);

formula buf2_empty=true;
formula buf2_full=false;

formula locked1=buf0_empty|buf1_full;
formula locked2=buf1_empty|buf2_full;



module line

[] is_up1=1  & is_up2=1  & locked1  & locked2  ->               (is_up1'=1)&(is_up2'=1);
[] is_up1=1  & is_up2=1  & !locked1 & locked2  -> p1           :(is_up1'=0)
                                            + (1-p1)       :(is_up1'=1)&(buf1'=buf1+1);
[] is_up1=1  & is_up2=1  & locked1  & !locked2 &Nb_piece<Nb_piece_max -> p2           :(is_up2'=0)&(buf1'=buf1-1)                                           
					    + (1-p2)       :(is_up2'=1)&(buf1'=buf1-1)&(Nb_piece'=Nb_piece +1);
[] is_up1=1  & is_up2=1  & !locked1 & !locked2&Nb_piece<Nb_piece_max -> p1    *p2    :(is_up1'=0)&(is_up2'=0)&(buf1'=buf1-1)
                                            + (1-p1)*p2    :(is_up1'=1)&(is_up2'=0)
                                            + p1    *(1-p2):(is_up1'=0)&(is_up2'=1)&(buf1'=buf1-1)&(Nb_piece'=Nb_piece +1)
                                            + (1-p1)*(1-p2):(is_up1'=1)&(is_up2'=1)&(Nb_piece'=Nb_piece +1);

 

[] is_up1=1  & !is_up2=1 & locked1&Nb_piece<Nb_piece_max             -> r2           :(is_up2'=1)&(Nb_piece'=Nb_piece +1)
                                            + (1-r2)       :(is_up2'=0);
[] is_up1=1  & !is_up2=1 & !locked1 &Nb_piece<Nb_piece_max           -> p1    *r2    :(is_up1'=0)&(is_up2'=1)&(Nb_piece'=Nb_piece +1)
                                            + (1-p1)*r2    :(is_up1'=1)&(is_up2'=1)&(buf1'=buf1+1)&(Nb_piece'=Nb_piece +1)
                                            + p1    *(1-r2):(is_up1'=0)&(is_up2'=0)
                                            + (1-p1)*(1-r2):(is_up1'=1)&(is_up2'=0)&(buf1'=buf1+1);

 

[] !is_up1=1 & is_up2=1 & locked2              -> r1           :(is_up1'=1)&(buf1'=buf1+1)
                                            + (1-r1)       :(is_up1'=0);
[] !is_up1=1 & is_up2=1 & !locked2 &Nb_piece<Nb_piece_max            -> r1    *p2    :(is_up1'=1)&(is_up2'=0)
                                            + (1-r1)*p2    :(is_up1'=0)&(is_up2'=0)&(buf1'=buf1-1)
                                            + r1    *(1-p2):(is_up1'=1)&(is_up2'=1)&(Nb_piece'=Nb_piece +1)
                                            + (1-r1)*(1-p2):(is_up1'=0)&(is_up2'=1)&(buf1'=buf1-1)&(Nb_piece'=Nb_piece +1);

 


[] !is_up1=1 & !is_up2=1 & buf1<cap1&Nb_piece<Nb_piece_max           -> r1    *r2    :(is_up1'=1)&(is_up2'=1)&(buf1'=buf1+1)&(Nb_piece'=Nb_piece +1)
                                            + (1-r1)*r2    :(is_up1'=0)&(is_up2'=1)&(Nb_piece'=Nb_piece +1)
                                            + r1    *(1-r2):(is_up1'=1)&(is_up2'=0)&(buf1'=buf1+1)
                                            + (1-r1)*(1-r2):(is_up1'=0)&(is_up2'=0);

 


endmodule



rewards "WIP" true : buf1 + (2-is_up1-is_up2);
endrewards

rewards "Buffer_empty" buf1=0: 1; 
endrewards

rewards "Buffer_full" buf1=cap1: 1; 
endrewards

rewards "production_rate" true: Nb_piece/100; 
endrewards



